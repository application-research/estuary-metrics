basePath: /
definitions:
  api.CrudAPI:
    properties:
      create_url:
        type: string
      delete_url:
        type: string
      fetch_ddl_url:
        type: string
      name:
        type: string
      retrieve_many_url:
        type: string
      retrieve_one_url:
        type: string
      table_info:
        $ref: '#/definitions/model.TableInfo'
      update_url:
        type: string
    type: object
  api.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  api.PagedResults:
    properties:
      data: {}
      page:
        type: integer
      page_size:
        type: integer
      total_records:
        type: integer
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.AuthToken:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      expiry:
        type: string
      id:
        type: integer
      token:
        type: string
      updated_at:
        type: string
      upload_only:
        type: boolean
      user:
        type: integer
    type: object
  model.Autoretrieve:
    properties:
      addresses:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      handle:
        type: string
      id:
        type: integer
      last_connection:
        type: string
      peer_id:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
  model.Collection:
    properties:
      c_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
      uuid:
        type: string
    type: object
  model.CollectionRef:
    properties:
      collection:
        type: integer
      content:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      path:
        type: string
    type: object
  model.ColumnInfo:
    properties:
      column_length:
        type: integer
      column_type:
        type: string
      comment:
        type: string
      database_type_name:
        type: string
      database_type_pretty:
        type: string
      default_value:
        type: string
      go_field_name:
        type: string
      go_field_type:
        type: string
      index:
        type: integer
      is_array:
        type: boolean
      is_auto_increment:
        type: boolean
      is_nullable:
        type: boolean
      is_primary_key:
        type: boolean
      json_field_name:
        type: string
      name:
        type: string
      notes:
        type: string
      protobuf_field_name:
        type: string
      protobuf_field_pos:
        type: integer
      protobuf_field_type:
        type: string
    type: object
  model.Content:
    properties:
      active:
        type: boolean
      aggregate:
        type: boolean
      aggregated_in:
        type: integer
      cid:
        items:
          type: integer
        type: array
      created_at:
        type: string
      dag_split:
        type: boolean
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      failed:
        type: boolean
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      offloaded:
        type: boolean
      origins:
        type: string
      pin_meta:
        type: string
      pinning:
        type: boolean
      replace:
        type: boolean
      replication:
        type: integer
      size:
        type: integer
      split_from:
        type: integer
      type:
        type: integer
      updated_at:
        type: string
      user:
        type: string
      user_id:
        type: integer
    type: object
  model.ContentDeal:
    properties:
      content:
        type: integer
      created_at:
        type: string
      deal_id:
        type: integer
      deal_uuid:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      dt_chan:
        type: string
      failed:
        type: boolean
      failed_at:
        type: string
      id:
        type: integer
      miner:
        type: string
      on_chain_at:
        type: string
      prop_cid:
        items:
          type: integer
        type: array
      sealed_at:
        type: string
      slashed:
        type: boolean
      transfer_finished:
        type: string
      transfer_started:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      verified:
        type: boolean
    type: object
  model.Dealer:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      handle:
        type: string
      host:
        type: string
      id:
        type: integer
      last_connection:
        type: string
      open:
        type: boolean
      peer_id:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
  model.DfeRecord:
    properties:
      content:
        type: integer
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      message:
        type: string
      miner:
        type: string
      miner_version:
        type: string
      phase:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  model.InviteCode:
    properties:
      claimed_by:
        type: integer
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updated_at:
        type: string
    type: object
  model.MinerStorageAsk:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      max_piece_size:
        type: integer
      min_piece_size:
        type: integer
      miner:
        type: string
      price:
        type: string
      updated_at:
        type: string
      verified_price:
        type: string
    type: object
  model.ObjRef:
    properties:
      content:
        type: integer
      id:
        type: integer
      object:
        type: integer
      offloaded:
        type: integer
    type: object
  model.Object:
    properties:
      cid:
        items:
          type: integer
        type: array
      id:
        type: integer
      last_access:
        type: string
      reads:
        type: integer
      size:
        type: integer
    type: object
  model.PieceCommRecord:
    properties:
      car_size:
        type: integer
      data:
        items:
          type: integer
        type: array
      piece:
        items:
          type: integer
        type: array
      size:
        type: integer
    type: object
  model.ProposalRecord:
    properties:
      data:
        items:
          type: integer
        type: array
      prop_cid:
        items:
          type: integer
        type: array
    type: object
  model.RetrievalFailureRecord:
    properties:
      cid:
        items:
          type: integer
        type: array
      content:
        type: integer
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      message:
        type: string
      miner:
        type: string
      phase:
        type: string
      updated_at:
        type: string
    type: object
  model.RetrievalSuccessRecord:
    properties:
      ask_price:
        type: string
      average_speed:
        type: integer
      cid:
        items:
          type: integer
        type: array
      created_at:
        type: string
      duration_ms:
        type: integer
      id:
        type: integer
      miner:
        type: string
      num_payments:
        type: integer
      peer:
        type: string
      prop_cid:
        items:
          type: integer
        type: array
      size:
        type: integer
      total_payment:
        type: string
    type: object
  model.Shuttle:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      handle:
        type: string
      host:
        type: string
      id:
        type: integer
      last_connection:
        type: string
      open:
        type: boolean
      peer_id:
        type: string
      priority:
        type: integer
      private:
        type: boolean
      token:
        type: string
      updated_at:
        type: string
    type: object
  model.StorageMiner:
    properties:
      address:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      owner:
        type: integer
      suspended:
        type: boolean
      suspended_reason:
        type: string
      updated_at:
        type: string
      version:
        type: string
    type: object
  model.TableInfo:
    properties:
      columns:
        items:
          $ref: '#/definitions/model.ColumnInfo'
        type: array
      name:
        type: string
    type: object
  model.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      d_id:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      flags:
        type: integer
      id:
        type: integer
      pass_hash:
        type: string
      perm:
        type: integer
      salt:
        type: string
      storage_disabled:
        type: boolean
      updated_at:
        type: string
      user_email:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
host: localhost:3030
info:
  contact:
    email: me@me.com
    name: Me
    url: http://me.com/terms.html
  description: Sample CRUD api for estuary db
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Sample CRUD api for estuary db
  version: "1.0"
paths:
  /authtokens:
    get:
      consumes:
      - application/json
      description: GetAllAuthTokens is a handler to get a slice of record(s) from
        auth_tokens table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.AuthToken'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of AuthTokens
      tags:
      - AuthTokens
    post:
      consumes:
      - application/json
      description: add to add a single record to auth_tokens table in the estuary
        database
      parameters:
      - description: Add AuthTokens
        in: body
        name: AuthTokens
        required: true
        schema:
          $ref: '#/definitions/model.AuthToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to auth_tokens table
      tags:
      - AuthTokens
  /authtokens/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from auth_tokens table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.AuthToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from auth_tokens
      tags:
      - AuthTokens
    get:
      consumes:
      - application/json
      description: GetAuthTokens is a function to get a single record from the auth_tokens
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table AuthTokens by  argID
      tags:
      - AuthTokens
    put:
      consumes:
      - application/json
      description: Update a single record from auth_tokens table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update AuthTokens record
        in: body
        name: AuthTokens
        required: true
        schema:
          $ref: '#/definitions/model.AuthToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table auth_tokens
      tags:
      - AuthTokens
  /autoretrieves:
    get:
      consumes:
      - application/json
      description: GetAllAutoretrieves is a handler to get a slice of record(s) from
        autoretrieves table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Autoretrieve'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Autoretrieves
      tags:
      - Autoretrieves
    post:
      consumes:
      - application/json
      description: add to add a single record to autoretrieves table in the estuary
        database
      parameters:
      - description: Add Autoretrieves
        in: body
        name: Autoretrieves
        required: true
        schema:
          $ref: '#/definitions/model.Autoretrieve'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Autoretrieve'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to autoretrieves table
      tags:
      - Autoretrieves
  /autoretrieves/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from autoretrieves table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Autoretrieve'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from autoretrieves
      tags:
      - Autoretrieves
    get:
      consumes:
      - application/json
      description: GetAutoretrieves is a function to get a single record from the
        autoretrieves table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Autoretrieve'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Autoretrieves by  argID
      tags:
      - Autoretrieves
    put:
      consumes:
      - application/json
      description: Update a single record from autoretrieves table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update Autoretrieves record
        in: body
        name: Autoretrieves
        required: true
        schema:
          $ref: '#/definitions/model.Autoretrieve'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Autoretrieve'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table autoretrieves
      tags:
      - Autoretrieves
  /collectionrefs:
    get:
      consumes:
      - application/json
      description: GetAllCollectionRefs is a handler to get a slice of record(s) from
        collection_refs table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.CollectionRef'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of CollectionRefs
      tags:
      - CollectionRefs
    post:
      consumes:
      - application/json
      description: add to add a single record to collection_refs table in the estuary
        database
      parameters:
      - description: Add CollectionRefs
        in: body
        name: CollectionRefs
        required: true
        schema:
          $ref: '#/definitions/model.CollectionRef'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CollectionRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to collection_refs table
      tags:
      - CollectionRefs
  /collectionrefs/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from collection_refs table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.CollectionRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from collection_refs
      tags:
      - CollectionRefs
    get:
      consumes:
      - application/json
      description: GetCollectionRefs is a function to get a single record from the
        collection_refs table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CollectionRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table CollectionRefs by  argID
      tags:
      - CollectionRefs
    put:
      consumes:
      - application/json
      description: Update a single record from collection_refs table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update CollectionRefs record
        in: body
        name: CollectionRefs
        required: true
        schema:
          $ref: '#/definitions/model.CollectionRef'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CollectionRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table collection_refs
      tags:
      - CollectionRefs
  /collections:
    get:
      consumes:
      - application/json
      description: GetAllCollections is a handler to get a slice of record(s) from
        collections table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Collection'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Collections
      tags:
      - Collections
    post:
      consumes:
      - application/json
      description: add to add a single record to collections table in the estuary
        database
      parameters:
      - description: Add Collections
        in: body
        name: Collections
        required: true
        schema:
          $ref: '#/definitions/model.Collection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to collections table
      tags:
      - Collections
  /collections/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from collections table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from collections
      tags:
      - Collections
    get:
      consumes:
      - application/json
      description: GetCollections is a function to get a single record from the collections
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Collections by  argID
      tags:
      - Collections
    put:
      consumes:
      - application/json
      description: Update a single record from collections table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update Collections record
        in: body
        name: Collections
        required: true
        schema:
          $ref: '#/definitions/model.Collection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table collections
      tags:
      - Collections
  /contentdeals:
    get:
      consumes:
      - application/json
      description: GetAllContentDeals is a handler to get a slice of record(s) from
        content_deals table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ContentDeal'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of ContentDeals
      tags:
      - ContentDeals
    post:
      consumes:
      - application/json
      description: add to add a single record to content_deals table in the estuary
        database
      parameters:
      - description: Add ContentDeals
        in: body
        name: ContentDeals
        required: true
        schema:
          $ref: '#/definitions/model.ContentDeal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContentDeal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to content_deals table
      tags:
      - ContentDeals
  /contentdeals/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from content_deals table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.ContentDeal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from content_deals
      tags:
      - ContentDeals
    get:
      consumes:
      - application/json
      description: GetContentDeals is a function to get a single record from the content_deals
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContentDeal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table ContentDeals by  argID
      tags:
      - ContentDeals
    put:
      consumes:
      - application/json
      description: Update a single record from content_deals table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update ContentDeals record
        in: body
        name: ContentDeals
        required: true
        schema:
          $ref: '#/definitions/model.ContentDeal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContentDeal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table content_deals
      tags:
      - ContentDeals
  /contents:
    get:
      consumes:
      - application/json
      description: GetAllContents is a handler to get a slice of record(s) from contents
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Content'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Contents
      tags:
      - Contents
    post:
      consumes:
      - application/json
      description: add to add a single record to contents table in the estuary database
      parameters:
      - description: Add Contents
        in: body
        name: Contents
        required: true
        schema:
          $ref: '#/definitions/model.Content'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Content'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to contents table
      tags:
      - Contents
  /contents/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from contents table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Content'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from contents
      tags:
      - Contents
    get:
      consumes:
      - application/json
      description: GetContents is a function to get a single record from the contents
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Content'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Contents by  argID
      tags:
      - Contents
    put:
      consumes:
      - application/json
      description: Update a single record from contents table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update Contents record
        in: body
        name: Contents
        required: true
        schema:
          $ref: '#/definitions/model.Content'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Content'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table contents
      tags:
      - Contents
  /ddl:
    get:
      consumes:
      - application/json
      description: GetDdlEndpoints is a function to get a list of ddl endpoints available
        for tables in the estuary database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CrudAPI'
      summary: Gets a list of ddl endpoints available for tables in the estuary database
      tags:
      - TableInfo
  /ddl/{argID}:
    get:
      consumes:
      - application/json
      description: GetDdl is a function to get table info for a table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CrudAPI'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get table info for a table in the estuary database by argID
      tags:
      - TableInfo
  /dealers:
    get:
      consumes:
      - application/json
      description: GetAllDealers is a handler to get a slice of record(s) from dealers
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Dealer'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Dealers
      tags:
      - Dealers
    post:
      consumes:
      - application/json
      description: add to add a single record to dealers table in the estuary database
      parameters:
      - description: Add Dealers
        in: body
        name: Dealers
        required: true
        schema:
          $ref: '#/definitions/model.Dealer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Dealer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to dealers table
      tags:
      - Dealers
  /dealers/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from dealers table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Dealer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from dealers
      tags:
      - Dealers
    get:
      consumes:
      - application/json
      description: GetDealers is a function to get a single record from the dealers
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Dealer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Dealers by  argID
      tags:
      - Dealers
    put:
      consumes:
      - application/json
      description: Update a single record from dealers table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update Dealers record
        in: body
        name: Dealers
        required: true
        schema:
          $ref: '#/definitions/model.Dealer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Dealer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table dealers
      tags:
      - Dealers
  /dferecords:
    get:
      consumes:
      - application/json
      description: GetAllDfeRecords is a handler to get a slice of record(s) from
        dfe_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.DfeRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of DfeRecords
      tags:
      - DfeRecords
    post:
      consumes:
      - application/json
      description: add to add a single record to dfe_records table in the estuary
        database
      parameters:
      - description: Add DfeRecords
        in: body
        name: DfeRecords
        required: true
        schema:
          $ref: '#/definitions/model.DfeRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DfeRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to dfe_records table
      tags:
      - DfeRecords
  /dferecords/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from dfe_records table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.DfeRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from dfe_records
      tags:
      - DfeRecords
    get:
      consumes:
      - application/json
      description: GetDfeRecords is a function to get a single record from the dfe_records
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DfeRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table DfeRecords by  argID
      tags:
      - DfeRecords
    put:
      consumes:
      - application/json
      description: Update a single record from dfe_records table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update DfeRecords record
        in: body
        name: DfeRecords
        required: true
        schema:
          $ref: '#/definitions/model.DfeRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DfeRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table dfe_records
      tags:
      - DfeRecords
  /invitecodes:
    get:
      consumes:
      - application/json
      description: GetAllInviteCodes is a handler to get a slice of record(s) from
        invite_codes table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.InviteCode'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of InviteCodes
      tags:
      - InviteCodes
    post:
      consumes:
      - application/json
      description: add to add a single record to invite_codes table in the estuary
        database
      parameters:
      - description: Add InviteCodes
        in: body
        name: InviteCodes
        required: true
        schema:
          $ref: '#/definitions/model.InviteCode'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.InviteCode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to invite_codes table
      tags:
      - InviteCodes
  /invitecodes/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from invite_codes table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.InviteCode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from invite_codes
      tags:
      - InviteCodes
    get:
      consumes:
      - application/json
      description: GetInviteCodes is a function to get a single record from the invite_codes
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.InviteCode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table InviteCodes by  argID
      tags:
      - InviteCodes
    put:
      consumes:
      - application/json
      description: Update a single record from invite_codes table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update InviteCodes record
        in: body
        name: InviteCodes
        required: true
        schema:
          $ref: '#/definitions/model.InviteCode'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.InviteCode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table invite_codes
      tags:
      - InviteCodes
  /minerstorageasks:
    get:
      consumes:
      - application/json
      description: GetAllMinerStorageAsks is a handler to get a slice of record(s)
        from miner_storage_asks table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.MinerStorageAsk'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of MinerStorageAsks
      tags:
      - MinerStorageAsks
    post:
      consumes:
      - application/json
      description: add to add a single record to miner_storage_asks table in the estuary
        database
      parameters:
      - description: Add MinerStorageAsks
        in: body
        name: MinerStorageAsks
        required: true
        schema:
          $ref: '#/definitions/model.MinerStorageAsk'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MinerStorageAsk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to miner_storage_asks table
      tags:
      - MinerStorageAsks
  /minerstorageasks/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from miner_storage_asks table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.MinerStorageAsk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from miner_storage_asks
      tags:
      - MinerStorageAsks
    get:
      consumes:
      - application/json
      description: GetMinerStorageAsks is a function to get a single record from the
        miner_storage_asks table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MinerStorageAsk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table MinerStorageAsks by  argID
      tags:
      - MinerStorageAsks
    put:
      consumes:
      - application/json
      description: Update a single record from miner_storage_asks table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update MinerStorageAsks record
        in: body
        name: MinerStorageAsks
        required: true
        schema:
          $ref: '#/definitions/model.MinerStorageAsk'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MinerStorageAsk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table miner_storage_asks
      tags:
      - MinerStorageAsks
  /objects:
    get:
      consumes:
      - application/json
      description: GetAllObjects is a handler to get a slice of record(s) from objects
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Object'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Objects
      tags:
      - Objects
    post:
      consumes:
      - application/json
      description: add to add a single record to objects table in the estuary database
      parameters:
      - description: Add Objects
        in: body
        name: Objects
        required: true
        schema:
          $ref: '#/definitions/model.Object'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Object'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to objects table
      tags:
      - Objects
  /objects/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from objects table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Object'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from objects
      tags:
      - Objects
    get:
      consumes:
      - application/json
      description: GetObjects is a function to get a single record from the objects
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Object'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Objects by  argID
      tags:
      - Objects
    put:
      consumes:
      - application/json
      description: Update a single record from objects table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update Objects record
        in: body
        name: Objects
        required: true
        schema:
          $ref: '#/definitions/model.Object'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Object'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table objects
      tags:
      - Objects
  /objrefs:
    get:
      consumes:
      - application/json
      description: GetAllObjRefs is a handler to get a slice of record(s) from obj_refs
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ObjRef'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of ObjRefs
      tags:
      - ObjRefs
    post:
      consumes:
      - application/json
      description: add to add a single record to obj_refs table in the estuary database
      parameters:
      - description: Add ObjRefs
        in: body
        name: ObjRefs
        required: true
        schema:
          $ref: '#/definitions/model.ObjRef'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ObjRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to obj_refs table
      tags:
      - ObjRefs
  /objrefs/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from obj_refs table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.ObjRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from obj_refs
      tags:
      - ObjRefs
    get:
      consumes:
      - application/json
      description: GetObjRefs is a function to get a single record from the obj_refs
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ObjRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table ObjRefs by  argID
      tags:
      - ObjRefs
    put:
      consumes:
      - application/json
      description: Update a single record from obj_refs table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update ObjRefs record
        in: body
        name: ObjRefs
        required: true
        schema:
          $ref: '#/definitions/model.ObjRef'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ObjRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table obj_refs
      tags:
      - ObjRefs
  /piececommrecords:
    get:
      consumes:
      - application/json
      description: GetAllPieceCommRecords is a handler to get a slice of record(s)
        from piece_comm_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.PieceCommRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of PieceCommRecords
      tags:
      - PieceCommRecords
    post:
      consumes:
      - application/json
      description: add to add a single record to piece_comm_records table in the estuary
        database
      parameters:
      - description: Add PieceCommRecords
        in: body
        name: PieceCommRecords
        required: true
        schema:
          $ref: '#/definitions/model.PieceCommRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PieceCommRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to piece_comm_records table
      tags:
      - PieceCommRecords
  /piececommrecords/{argData}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from piece_comm_records table in the estuary
        database
      parameters:
      - description: data
        in: path
        name: argData
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.PieceCommRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from piece_comm_records
      tags:
      - PieceCommRecords
    get:
      consumes:
      - application/json
      description: GetPieceCommRecords is a function to get a single record from the
        piece_comm_records table in the estuary database
      operationId: argData
      parameters:
      - description: data
        in: path
        name: argData
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PieceCommRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table PieceCommRecords by  argData
      tags:
      - PieceCommRecords
    put:
      consumes:
      - application/json
      description: Update a single record from piece_comm_records table in the estuary
        database
      parameters:
      - description: data
        in: path
        name: argData
        required: true
        type: string
      - description: Update PieceCommRecords record
        in: body
        name: PieceCommRecords
        required: true
        schema:
          $ref: '#/definitions/model.PieceCommRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PieceCommRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table piece_comm_records
      tags:
      - PieceCommRecords
  /proposalrecords:
    get:
      consumes:
      - application/json
      description: GetAllProposalRecords is a handler to get a slice of record(s)
        from proposal_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ProposalRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of ProposalRecords
      tags:
      - ProposalRecords
    post:
      consumes:
      - application/json
      description: add to add a single record to proposal_records table in the estuary
        database
      parameters:
      - description: Add ProposalRecords
        in: body
        name: ProposalRecords
        required: true
        schema:
          $ref: '#/definitions/model.ProposalRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProposalRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to proposal_records table
      tags:
      - ProposalRecords
  /proposalrecords/{argPropCid}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from proposal_records table in the estuary
        database
      parameters:
      - description: prop_cid
        in: path
        name: argPropCid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.ProposalRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from proposal_records
      tags:
      - ProposalRecords
    get:
      consumes:
      - application/json
      description: GetProposalRecords is a function to get a single record from the
        proposal_records table in the estuary database
      parameters:
      - description: prop_cid
        in: path
        name: argPropCid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProposalRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table ProposalRecords by  argPropCid
      tags:
      - ProposalRecords
    put:
      consumes:
      - application/json
      description: Update a single record from proposal_records table in the estuary
        database
      parameters:
      - description: prop_cid
        in: path
        name: argPropCid
        required: true
        type: string
      - description: Update ProposalRecords record
        in: body
        name: ProposalRecords
        required: true
        schema:
          $ref: '#/definitions/model.ProposalRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProposalRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table proposal_records
      tags:
      - ProposalRecords
  /retrievalfailurerecords:
    get:
      consumes:
      - application/json
      description: GetAllRetrievalFailureRecords is a handler to get a slice of record(s)
        from retrieval_failure_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.RetrievalFailureRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of RetrievalFailureRecords
      tags:
      - RetrievalFailureRecords
    post:
      consumes:
      - application/json
      description: add to add a single record to retrieval_failure_records table in
        the estuary database
      parameters:
      - description: Add RetrievalFailureRecords
        in: body
        name: RetrievalFailureRecords
        required: true
        schema:
          $ref: '#/definitions/model.RetrievalFailureRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RetrievalFailureRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to retrieval_failure_records table
      tags:
      - RetrievalFailureRecords
  /retrievalfailurerecords/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from retrieval_failure_records table in
        the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.RetrievalFailureRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from retrieval_failure_records
      tags:
      - RetrievalFailureRecords
    get:
      consumes:
      - application/json
      description: GetRetrievalFailureRecords is a function to get a single record
        from the retrieval_failure_records table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RetrievalFailureRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table RetrievalFailureRecords by  argID
      tags:
      - RetrievalFailureRecords
    put:
      consumes:
      - application/json
      description: Update a single record from retrieval_failure_records table in
        the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update RetrievalFailureRecords record
        in: body
        name: RetrievalFailureRecords
        required: true
        schema:
          $ref: '#/definitions/model.RetrievalFailureRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RetrievalFailureRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table retrieval_failure_records
      tags:
      - RetrievalFailureRecords
  /retrievalsuccessrecords:
    get:
      consumes:
      - application/json
      description: GetAllRetrievalSuccessRecords is a handler to get a slice of record(s)
        from retrieval_success_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.RetrievalSuccessRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of RetrievalSuccessRecords
      tags:
      - RetrievalSuccessRecords
    post:
      consumes:
      - application/json
      description: add to add a single record to retrieval_success_records table in
        the estuary database
      parameters:
      - description: Add RetrievalSuccessRecords
        in: body
        name: RetrievalSuccessRecords
        required: true
        schema:
          $ref: '#/definitions/model.RetrievalSuccessRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RetrievalSuccessRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to retrieval_success_records table
      tags:
      - RetrievalSuccessRecords
  /retrievalsuccessrecords/{argPropCid}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from retrieval_success_records table in
        the estuary database
      parameters:
      - description: prop_cid
        in: path
        name: argPropCid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.RetrievalSuccessRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from retrieval_success_records
      tags:
      - RetrievalSuccessRecords
    get:
      consumes:
      - application/json
      description: GetRetrievalSuccessRecords is a function to get a single record
        from the retrieval_success_records table in the estuary database
      parameters:
      - description: prop_cid
        in: path
        name: argPropCid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RetrievalSuccessRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table RetrievalSuccessRecords by  argPropCid
      tags:
      - RetrievalSuccessRecords
    put:
      consumes:
      - application/json
      description: Update a single record from retrieval_success_records table in
        the estuary database
      parameters:
      - description: prop_cid
        in: path
        name: argPropCid
        required: true
        type: string
      - description: Update RetrievalSuccessRecords record
        in: body
        name: RetrievalSuccessRecords
        required: true
        schema:
          $ref: '#/definitions/model.RetrievalSuccessRecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RetrievalSuccessRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table retrieval_success_records
      tags:
      - RetrievalSuccessRecords
  /shuttles:
    get:
      consumes:
      - application/json
      description: GetAllShuttles is a handler to get a slice of record(s) from shuttles
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Shuttle'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Shuttles
      tags:
      - Shuttles
    post:
      consumes:
      - application/json
      description: add to add a single record to shuttles table in the estuary database
      parameters:
      - description: Add Shuttles
        in: body
        name: Shuttles
        required: true
        schema:
          $ref: '#/definitions/model.Shuttle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Shuttle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to shuttles table
      tags:
      - Shuttles
  /shuttles/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from shuttles table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.Shuttle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from shuttles
      tags:
      - Shuttles
    get:
      consumes:
      - application/json
      description: GetShuttles is a function to get a single record from the shuttles
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Shuttle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Shuttles by  argID
      tags:
      - Shuttles
    put:
      consumes:
      - application/json
      description: Update a single record from shuttles table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update Shuttles record
        in: body
        name: Shuttles
        required: true
        schema:
          $ref: '#/definitions/model.Shuttle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Shuttle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table shuttles
      tags:
      - Shuttles
  /storageminers:
    get:
      consumes:
      - application/json
      description: GetAllStorageMiners is a handler to get a slice of record(s) from
        storage_miners table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.StorageMiner'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of StorageMiners
      tags:
      - StorageMiners
    post:
      consumes:
      - application/json
      description: add to add a single record to storage_miners table in the estuary
        database
      parameters:
      - description: Add StorageMiners
        in: body
        name: StorageMiners
        required: true
        schema:
          $ref: '#/definitions/model.StorageMiner'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StorageMiner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to storage_miners table
      tags:
      - StorageMiners
  /storageminers/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from storage_miners table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.StorageMiner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from storage_miners
      tags:
      - StorageMiners
    get:
      consumes:
      - application/json
      description: GetStorageMiners is a function to get a single record from the
        storage_miners table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StorageMiner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table StorageMiners by  argID
      tags:
      - StorageMiners
    put:
      consumes:
      - application/json
      description: Update a single record from storage_miners table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update StorageMiners record
        in: body
        name: StorageMiners
        required: true
        schema:
          $ref: '#/definitions/model.StorageMiner'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StorageMiner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table storage_miners
      tags:
      - StorageMiners
  /users:
    get:
      consumes:
      - application/json
      description: GetAllUsers is a handler to get a slice of record(s) from users
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: add to add a single record to users table in the estuary database
      parameters:
      - description: Add Users
        in: body
        name: Users
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Add an record to users table
      tags:
      - Users
  /users/{argID}:
    delete:
      consumes:
      - application/json
      description: Delete a single record from users table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Delete a record from users
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: GetUsers is a function to get a single record from the users table
        in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Users by  argID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a single record from users table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      - description: Update Users record
        in: body
        name: Users
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Update an record in table users
      tags:
      - Users
  /users/count:
    get:
      consumes:
      - application/json
      description: GetNumberOfUsers is a handler to get the number of record(s) from
        users table in the estuary database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get number of Users
      tags:
      - Users
swagger: "2.0"

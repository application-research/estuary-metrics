definitions:
  api.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  api.PagedResults:
    properties:
      data: {}
      page:
        type: integer
      page_size:
        type: integer
      total_records:
        type: integer
    type: object
  core.DeviceInfo:
    properties:
      actions:
        items:
          properties:
            name:
              type: string
            type:
              type: string
          type: object
        type: array
      allow_same_vlan_on_multiple_ports:
        type: boolean
      always_pxe:
        type: boolean
      billing_cycle:
        type: string
      bonding_mode:
        type: integer
      created_at:
        type: string
      created_by:
        properties:
          avatar_thumb_url:
            type: string
          created_at:
            type: string
          email:
            type: string
          first_name:
            type: string
          full_name:
            type: string
          href:
            type: string
          id:
            type: string
          last_name:
            type: string
          level:
            type: string
          short_id:
            type: string
          updated_at:
            type: string
        type: object
      customdata:
        type: object
      description: {}
      device_type:
        type: string
      facility:
        properties:
          address:
            properties:
              address:
                type: string
              address2:
                type: string
              city:
                type: string
              coordinates:
                properties:
                  latitude:
                    type: string
                  longitude:
                    type: string
                type: object
              country:
                type: string
              id:
                type: string
              state:
                type: string
              zip_code:
                type: string
            type: object
          code:
            type: string
          features:
            items:
              type: string
            type: array
          id:
            type: string
          ip_ranges:
            items: {}
            type: array
          metro:
            properties:
              code:
                type: string
              country:
                type: string
              id:
                type: string
              name:
                type: string
            type: object
          name:
            type: string
        type: object
      favorite:
        type: boolean
      hostname:
        type: string
      href:
        type: string
      id:
        type: string
      image_url: {}
      ip_addresses:
        items:
          properties:
            address:
              type: string
            address_family:
              type: integer
            assigned_to:
              properties:
                href:
                  type: string
              type: object
            cidr:
              type: integer
            created_at:
              type: string
            customdata:
              type: object
            details: {}
            enabled:
              type: boolean
            facility:
              properties:
                address:
                  properties:
                    address:
                      type: string
                    address2:
                      type: string
                    city:
                      type: string
                    coordinates:
                      properties:
                        latitude:
                          type: string
                        longitude:
                          type: string
                      type: object
                    country:
                      type: string
                    id:
                      type: string
                    state:
                      type: string
                    zip_code:
                      type: string
                  type: object
                code:
                  type: string
                features:
                  items:
                    type: string
                  type: array
                id:
                  type: string
                ip_ranges:
                  items: {}
                  type: array
                metro:
                  properties:
                    code:
                      type: string
                    country:
                      type: string
                    id:
                      type: string
                    name:
                      type: string
                  type: object
                name:
                  type: string
              type: object
            gateway:
              type: string
            global_ip:
              type: boolean
            href:
              type: string
            id:
              type: string
            interface:
              properties:
                href:
                  type: string
              type: object
            manageable:
              type: boolean
            management:
              type: boolean
            metro:
              properties:
                code:
                  type: string
                country:
                  type: string
                id:
                  type: string
                name:
                  type: string
              type: object
            netmask:
              type: string
            network:
              type: string
            project:
              properties:
                href:
                  type: string
              type: object
            project_lite:
              properties:
                href:
                  type: string
              type: object
            public:
              type: boolean
            tags:
              items: {}
              type: array
          type: object
        type: array
      ipxe_script_url: {}
      iqn:
        type: string
      locked:
        type: boolean
      metro:
        properties:
          code:
            type: string
          country:
            type: string
          id:
            type: string
          name:
            type: string
        type: object
      network_frozen:
        type: boolean
      network_ports:
        items:
          properties:
            bond:
              properties:
                id:
                  type: string
                name:
                  type: string
              type: object
            data:
              properties:
                bonded:
                  type: boolean
                mac:
                  type: string
              type: object
            disbond_operation_supported:
              type: boolean
            href:
              type: string
            id:
              type: string
            name:
              type: string
            native_virtual_network: {}
            network_type:
              type: string
            type:
              type: string
            virtual_networks:
              items: {}
              type: array
          type: object
        type: array
      operating_system:
        properties:
          distro:
            type: string
          distro_label:
            type: string
          id:
            type: string
          licensed:
            type: boolean
          name:
            type: string
          preinstallable:
            type: boolean
          pricing:
            type: object
          provisionable_on:
            items: {}
            type: array
          slug:
            type: string
          version:
            type: string
        type: object
      plan:
        properties:
          available_in:
            items:
              properties:
                href:
                  type: string
                price:
                  properties:
                    hour:
                      type: number
                  type: object
              type: object
            type: array
          available_in_metros:
            items:
              properties:
                href:
                  type: string
                price:
                  properties:
                    hour:
                      type: number
                  type: object
              type: object
            type: array
          class:
            type: string
          deployment_types:
            items:
              type: string
            type: array
          description:
            type: string
          id:
            type: string
          legacy:
            type: boolean
          line:
            type: string
          name:
            type: string
          pricing:
            properties:
              hour:
                type: number
            type: object
          reservation_pricing:
            properties:
              am:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              ch:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              da:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              dc:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              fr:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              hk:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              la:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              ld:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              md:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              ny:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              one_month:
                properties:
                  month:
                    type: number
                type: object
              one_year:
                properties:
                  month:
                    type: number
                type: object
              pa:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              se:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              sg:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              sl:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              sp:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              sv:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              sy:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              three_year:
                properties:
                  month:
                    type: number
                type: object
              tr:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
              ty:
                properties:
                  one_month:
                    properties:
                      month:
                        type: number
                    type: object
                  one_year:
                    properties:
                      month:
                        type: number
                    type: object
                  three_year:
                    properties:
                      month:
                        type: number
                    type: object
                type: object
            type: object
          slug:
            type: string
          specs:
            properties:
              cpus:
                items:
                  properties:
                    count:
                      type: integer
                    type:
                      type: string
                  type: object
                type: array
              drives:
                items:
                  properties:
                    category:
                      type: string
                    count:
                      type: integer
                    size:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              features:
                properties:
                  raid:
                    type: boolean
                  txt:
                    type: boolean
                type: object
              memory:
                properties:
                  total:
                    type: string
                type: object
              nics:
                items:
                  properties:
                    count:
                      type: integer
                    type:
                      type: string
                  type: object
                type: array
            type: object
          type:
            type: string
        type: object
      project:
        properties:
          href:
            type: string
        type: object
      project_lite:
        properties:
          href:
            type: string
        type: object
      short_id:
        type: string
      ssh_keys:
        items:
          properties:
            href:
              type: string
          type: object
        type: array
      state:
        type: string
      storage:
        type: object
      switch_uuid:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
      user:
        type: string
      userdata:
        type: string
      volumes:
        items: {}
        type: array
    type: object
  core.DeviceUsage:
    properties:
      info:
        properties:
          name:
            type: string
          uuid:
            type: string
        type: object
      usages:
        items:
          properties:
            price:
              type: number
            quantity:
              type: number
            total:
              type: number
            unit:
              type: string
          type: object
        type: array
    type: object
  core.UuidGroup:
    properties:
      createdAfter:
        type: string
      createdBefore:
        type: string
      uuids:
        items:
          properties:
            name:
              type: string
            uuid:
              type: string
          type: object
        type: array
    type: object
  dao.TopCollectionUser:
    properties:
      count:
        type: integer
      userID:
        type: integer
      username:
        type: string
    type: object
  dao.TopMiner:
    properties:
      count:
        type: integer
      miner:
        type: string
      name:
        type: string
    type: object
  dao.TopUser:
    properties:
      id:
        type: integer
      total_bytes:
        type: integer
      username:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.AuthToken:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      expiry:
        type: string
      id:
        type: integer
      token:
        type: string
      updated_at:
        type: string
      upload_only:
        type: boolean
      user:
        type: integer
    type: object
  model.Autoretrieve:
    properties:
      addresses:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      handle:
        type: string
      id:
        type: integer
      last_connection:
        type: string
      peer_id:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
  model.Collection:
    properties:
      c_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
      uuid:
        type: string
    type: object
  model.CollectionRef:
    properties:
      collection:
        type: integer
      content:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      path:
        type: string
    type: object
  model.ColumnInfo:
    properties:
      column_length:
        type: integer
      column_type:
        type: string
      comment:
        type: string
      database_type_name:
        type: string
      database_type_pretty:
        type: string
      default_value:
        type: string
      go_field_name:
        type: string
      go_field_type:
        type: string
      index:
        type: integer
      is_array:
        type: boolean
      is_auto_increment:
        type: boolean
      is_nullable:
        type: boolean
      is_primary_key:
        type: boolean
      json_field_name:
        type: string
      name:
        type: string
      notes:
        type: string
      protobuf_field_name:
        type: string
      protobuf_field_pos:
        type: integer
      protobuf_field_type:
        type: string
    type: object
  model.Content:
    properties:
      active:
        type: boolean
      aggregate:
        type: boolean
      aggregated_in:
        type: integer
      cid:
        items:
          type: integer
        type: array
      created_at:
        type: string
      dag_split:
        type: boolean
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      failed:
        type: boolean
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      offloaded:
        type: boolean
      origins:
        type: string
      pin_meta:
        type: string
      pinning:
        type: boolean
      replace:
        type: boolean
      replication:
        type: integer
      size:
        type: integer
      split_from:
        type: integer
      type:
        type: integer
      updated_at:
        type: string
      user:
        type: string
      user_id:
        type: integer
    type: object
  model.ContentDeal:
    properties:
      content:
        type: integer
      created_at:
        type: string
      deal_id:
        type: integer
      deal_uuid:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      dt_chan:
        type: string
      failed:
        type: boolean
      failed_at:
        type: string
      id:
        type: integer
      miner:
        type: string
      on_chain_at:
        type: string
      prop_cid:
        items:
          type: integer
        type: array
      sealed_at:
        type: string
      slashed:
        type: boolean
      transfer_finished:
        type: string
      transfer_started:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      verified:
        type: boolean
    type: object
  model.Dealer:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      handle:
        type: string
      host:
        type: string
      id:
        type: integer
      last_connection:
        type: string
      open:
        type: boolean
      peer_id:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
  model.DfeRecord:
    properties:
      content:
        type: integer
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      message:
        type: string
      miner:
        type: string
      miner_version:
        type: string
      phase:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  model.InviteCode:
    properties:
      claimed_by:
        type: integer
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updated_at:
        type: string
    type: object
  model.MinerStorageAsk:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      max_piece_size:
        type: integer
      min_piece_size:
        type: integer
      miner:
        type: string
      price:
        type: string
      updated_at:
        type: string
      verified_price:
        type: string
    type: object
  model.ObjRef:
    properties:
      content:
        type: integer
      id:
        type: integer
      object:
        type: integer
      offloaded:
        type: integer
    type: object
  model.Object:
    properties:
      cid:
        items:
          type: integer
        type: array
      id:
        type: integer
      last_access:
        type: string
      reads:
        type: integer
      size:
        type: integer
    type: object
  model.PieceCommRecord:
    properties:
      car_size:
        type: integer
      data:
        items:
          type: integer
        type: array
      piece:
        items:
          type: integer
        type: array
      size:
        type: integer
    type: object
  model.ProposalRecord:
    properties:
      data:
        items:
          type: integer
        type: array
      prop_cid:
        items:
          type: integer
        type: array
    type: object
  model.RetrievalFailureRecord:
    properties:
      cid:
        items:
          type: integer
        type: array
      content:
        type: integer
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      message:
        type: string
      miner:
        type: string
      phase:
        type: string
      updated_at:
        type: string
    type: object
  model.RetrievalSuccessRecord:
    properties:
      ask_price:
        type: string
      average_speed:
        type: integer
      cid:
        items:
          type: integer
        type: array
      created_at:
        type: string
      duration_ms:
        type: integer
      id:
        type: integer
      miner:
        type: string
      num_payments:
        type: integer
      peer:
        type: string
      prop_cid:
        items:
          type: integer
        type: array
      size:
        type: integer
      total_payment:
        type: string
    type: object
  model.Shuttle:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      handle:
        type: string
      host:
        type: string
      id:
        type: integer
      last_connection:
        type: string
      open:
        type: boolean
      peer_id:
        type: string
      priority:
        type: integer
      private:
        type: boolean
      token:
        type: string
      updated_at:
        type: string
    type: object
  model.StorageMiner:
    properties:
      address:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      owner:
        type: integer
      suspended:
        type: boolean
      suspended_reason:
        type: string
      updated_at:
        type: string
      version:
        type: string
    type: object
  model.TableInfo:
    properties:
      columns:
        items:
          $ref: '#/definitions/model.ColumnInfo'
        type: array
      name:
        type: string
    type: object
  model.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      d_id:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      flags:
        type: integer
      id:
        type: integer
      pass_hash:
        type: string
      perm:
        type: integer
      salt:
        type: string
      storage_disabled:
        type: boolean
      updated_at:
        type: string
      user_email:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  objectsapi.CrudAPI:
    properties:
      create_url:
        type: string
      delete_url:
        type: string
      fetch_ddl_url:
        type: string
      name:
        type: string
      retrieve_many_url:
        type: string
      retrieve_one_url:
        type: string
      table_info:
        $ref: '#/definitions/model.TableInfo'
      update_url:
        type: string
    type: object
  sql.NullInt64:
    properties:
      int64:
        type: integer
      valid:
        description: Valid is true if Int64 is not NULL
        type: boolean
    type: object
  statsapi.DealMetricsInfo:
    properties:
      dealsAttempted:
        type: integer
      dealsFailed:
        type: integer
      dealsOnChain:
        type: integer
      dealsOnChainBytes:
        type: integer
      dealsSealed:
        type: integer
      dealsSealedBytes:
        type: integer
      time:
        type: string
    type: object
  statsapi.Location:
    properties:
      address:
        properties:
          address:
            type: string
          address2:
            type: string
          city:
            type: string
          coordinates:
            properties:
              latitude:
                type: string
              longitude:
                type: string
            type: object
          country:
            type: string
          id:
            type: string
          state:
            type: string
          zip_code:
            type: string
        type: object
      ip_address:
        properties:
          address:
            type: string
          gateway:
            type: string
          network:
            type: string
        type: object
      name:
        type: string
    type: object
  statsapi.PublicStats:
    properties:
      dealsOnChain:
        $ref: '#/definitions/sql.NullInt64'
      totalBytesUploaded:
        $ref: '#/definitions/sql.NullInt64'
      totalFiles:
        $ref: '#/definitions/sql.NullInt64'
      totalObjectsRef:
        $ref: '#/definitions/sql.NullInt64'
      totalStorage:
        $ref: '#/definitions/sql.NullInt64'
      totalStorageMiners:
        $ref: '#/definitions/sql.NullInt64'
      totalUsers:
        $ref: '#/definitions/sql.NullInt64'
    type: object
  statsapi.RetrievalStats:
    properties:
      dealAcceptanceRate:
        type: string
      dealFailureRate:
        type: string
      dealSuccessRate:
        type: string
      failedDealsDueToUndialableMiners:
        type: string
      timeToFirstByte:
        type: string
      totalNumberOfFailedRetrieval:
        type: string
      totalNumberOfSuccessfulRetrieval:
        type: string
      totalRetrievalDealProposalAccepted:
        type: string
      totalRetrievalDealProposalRejected:
        type: string
      totalRetrievalDealsProposed:
        type: string
    type: object
  statsapi.StorageRateStats:
    properties:
      dealFailureRate:
        type: string
      dealSuccessRate:
        type: string
    type: object
host: https://metrics-api.estuary.tech/api/v1
info:
  contact:
    email: me@me.com
    name: Outercore Engineering
    url: http://me.com/terms.html
  description: Estuary Metrics API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Estuary Metrics API
  version: 0.0.1
paths:
  /authtokens:
    get:
      consumes:
      - application/json
      description: GetAllAuthTokens is a handler to get a slice of record(s) from
        auth_tokens table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.AuthToken'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of AuthTokens
      tags:
      - AuthTokens
  /authtokens/{argID}:
    get:
      consumes:
      - application/json
      description: GetAuthTokens is a function to get a single record from the auth_tokens
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table AuthTokens by  argID
      tags:
      - AuthTokens
  /authtokens/activecount:
    get:
      consumes:
      - application/json
      description: GetAllActiveAuthTokenCount is a handler to get all record from
        the auth_tokens table in the estuary database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get a single AuthTokens
      tags:
      - AuthTokens
  /authtokens/dynamicquery:
    get:
      consumes:
      - application/json
      description: GetAuthTokensDynamicQuery is a handler to get a slice of record(s)
        from auth_tokens table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      - description: dynamic query
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.AuthToken'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of AuthTokens
      tags:
      - AuthTokens
  /autoretrieves:
    get:
      consumes:
      - application/json
      description: GetAllAutoretrieves is a handler to get a slice of record(s) from
        autoretrieves table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Autoretrieve'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Autoretrieves
      tags:
      - Autoretrieves
  /autoretrieves/{argID}:
    get:
      consumes:
      - application/json
      description: GetAutoretrieves is a function to get a single record from the
        autoretrieves table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Autoretrieve'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Autoretrieves by  argID
      tags:
      - Autoretrieves
  /autoretrieves/dynamicquery:
    get:
      consumes:
      - application/json
      description: GetAutoretrievesDynamicQuery is a function to get a slice of record(s)
        from autoretrieves table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      - description: dynamic query
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Autoretrieve'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Autoretrieves
      tags:
      - Autoretrieves
  /collectionrefs:
    get:
      consumes:
      - application/json
      description: GetAllCollectionRefs is a handler to get a slice of record(s) from
        collection_refs table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.CollectionRef'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of CollectionRefs
      tags:
      - CollectionRefs
  /collectionrefs/{argID}:
    get:
      consumes:
      - application/json
      description: GetCollectionRefs is a function to get a single record from the
        collection_refs table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CollectionRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table CollectionRefs by  argID
      tags:
      - CollectionRefs
  /collectionrefs/dynamicquery:
    get:
      consumes:
      - application/json
      description: GetCollectionsRefDynamicQuery is a handler to get a slice of record(s)
        from collection_refs table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      - description: query string
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.CollectionRef'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of CollectionRefs
      tags:
      - CollectionRefs
  /collections:
    get:
      consumes:
      - application/json
      description: GetAllCollections is a handler to get a slice of record(s) from
        collections table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Collection'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Collections
      tags:
      - Collections
  /collections/{argID}:
    get:
      consumes:
      - application/json
      description: GetCollections is a function to get a single record from the collections
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Collections by  argID
      tags:
      - Collections
  /collections/dynamicquery:
    get:
      consumes:
      - application/json
      description: GetCollectionsDynamicQuery is a function to get a slice of record(s)
        from collections table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      - description: dynamic query
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Collection'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Collections
      tags:
      - Collections
  /contentdeals:
    get:
      consumes:
      - application/json
      description: GetAllContentDeals is a handler to get a slice of record(s) from
        content_deals table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ContentDeal'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of ContentDeals
      tags:
      - ContentDeals
  /contentdeals/{argID}:
    get:
      consumes:
      - application/json
      description: GetContentDeals is a function to get a single record from the content_deals
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContentDeal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table ContentDeals by  argID
      tags:
      - ContentDeals
  /contents:
    get:
      consumes:
      - application/json
      description: GetAllContents is a handler to get a slice of record(s) from contents
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Content'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Contents
      tags:
      - Contents
  /contents/{argID}:
    get:
      consumes:
      - application/json
      description: GetContents is a function to get a single record from the contents
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Content'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Contents by  argID
      tags:
      - Contents
  /ddl:
    get:
      consumes:
      - application/json
      description: GetDdlEndpoints is a function to get a list of ddl endpoints available
        for tables in the estuary database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/objectsapi.CrudAPI'
      summary: Gets a list of ddl endpoints available for tables in the estuary database
      tags:
      - TableInfo
  /ddl/{argID}:
    get:
      consumes:
      - application/json
      description: GetDdl is a function to get table info for a table in the estuary
        database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/objectsapi.CrudAPI'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get table info for a table in the estuary database by argID
      tags:
      - TableInfo
  /dealers:
    get:
      consumes:
      - application/json
      description: GetAllDealers is a handler to get a slice of record(s) from dealers
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Dealer'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Dealers
      tags:
      - Dealers
  /dealers/{argID}:
    get:
      consumes:
      - application/json
      description: GetDealers is a function to get a single record from the dealers
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Dealer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Dealers by  argID
      tags:
      - Dealers
  /dferecords:
    get:
      consumes:
      - application/json
      description: GetAllDfeRecords is a handler to get a slice of record(s) from
        dfe_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.DfeRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of DfeRecords
      tags:
      - DfeRecords
  /dferecords/{argID}:
    get:
      consumes:
      - application/json
      description: GetDfeRecords is a function to get a single record from the dfe_records
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DfeRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table DfeRecords by  argID
      tags:
      - DfeRecords
  /environment/equinix/billing:
    get:
      consumes:
      - application/json
      description: Get device usage
      parameters:
      - description: uuid
        in: query
        name: uuid
        required: true
        type: string
      - description: createdBefore
        in: query
        name: createdBefore
        required: true
        type: string
      - description: createdAfter
        in: query
        name: createdAfter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.DeviceInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get device usage
      tags:
      - Environment
  /environment/equinix/info:
    get:
      consumes:
      - application/json
      description: Get device info
      parameters:
      - description: uuid
        in: query
        name: uuid
        required: true
        type: string
      - description: createdBefore
        in: query
        name: createdBefore
        required: true
        type: string
      - description: createdAfter
        in: query
        name: createdAfter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.DeviceInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get device info
      tags:
      - Environment
  /environment/equinix/list/usages:
    post:
      consumes:
      - application/json
      description: Get device usages
      parameters:
      - description: uuidGroup
        in: body
        name: uuidGroup
        required: true
        schema:
          $ref: '#/definitions/core.UuidGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.DeviceUsage'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get device usages
      tags:
      - Environment
  /environment/equinix/usages:
    get:
      consumes:
      - application/json
      description: Get device usage
      parameters:
      - description: uuid
        in: query
        name: uuid
        required: true
        type: string
      - description: createdBefore
        in: query
        name: createdBefore
        required: true
        type: string
      - description: createdAfter
        in: query
        name: createdAfter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.DeviceUsage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get device usage
      tags:
      - Environment
  /invitecodes:
    get:
      consumes:
      - application/json
      description: GetAllInviteCodes is a handler to get a slice of record(s) from
        invite_codes table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.InviteCode'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of InviteCodes
      tags:
      - InviteCodes
  /invitecodes/{argID}:
    get:
      consumes:
      - application/json
      description: GetInviteCodes is a function to get a single record from the invite_codes
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.InviteCode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table InviteCodes by  argID
      tags:
      - InviteCodes
  /location/shuttle/{uuid}:
    get:
      consumes:
      - application/json
      description: Get the location of a shuttle
      parameters:
      - description: uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/statsapi.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get the location of a shuttle
      tags:
      - Location
  /minerstorageasks:
    get:
      consumes:
      - application/json
      description: GetAllMinerStorageAsks is a handler to get a slice of record(s)
        from miner_storage_asks table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.MinerStorageAsk'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of MinerStorageAsks
      tags:
      - MinerStorageAsks
  /minerstorageasks/{argID}:
    get:
      consumes:
      - application/json
      description: GetMinerStorageAsks is a function to get a single record from the
        miner_storage_asks table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MinerStorageAsk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table MinerStorageAsks by  argID
      tags:
      - MinerStorageAsks
  /objects:
    get:
      consumes:
      - application/json
      description: GetAllObjects is a handler to get a slice of record(s) from objects
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Object'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Objects
      tags:
      - Objects
  /objects/{argID}:
    get:
      consumes:
      - application/json
      description: GetObjects is a function to get a single record from the objects
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Object'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Objects by  argID
      tags:
      - Objects
  /objrefs:
    get:
      consumes:
      - application/json
      description: GetAllObjRefs is a handler to get a slice of record(s) from obj_refs
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ObjRef'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of ObjRefs
      tags:
      - ObjRefs
  /objrefs/{argID}:
    get:
      consumes:
      - application/json
      description: GetObjRefs is a function to get a single record from the obj_refs
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ObjRef'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table ObjRefs by  argID
      tags:
      - ObjRefs
  /piececommrecords:
    get:
      consumes:
      - application/json
      description: GetAllPieceCommRecords is a handler to get a slice of record(s)
        from piece_comm_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.PieceCommRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of PieceCommRecords
      tags:
      - PieceCommRecords
  /piececommrecords/{argData}:
    get:
      consumes:
      - application/json
      description: GetPieceCommRecords is a function to get a single record from the
        piece_comm_records table in the estuary database
      operationId: argData
      parameters:
      - description: data
        in: path
        name: argData
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PieceCommRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table PieceCommRecords by  argData
      tags:
      - PieceCommRecords
  /proposalrecords:
    get:
      consumes:
      - application/json
      description: GetAllProposalRecords is a handler to get a slice of record(s)
        from proposal_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ProposalRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of ProposalRecords
      tags:
      - ProposalRecords
  /proposalrecords/{argPropCid}:
    get:
      consumes:
      - application/json
      description: GetProposalRecords is a function to get a single record from the
        proposal_records table in the estuary database
      parameters:
      - description: prop_cid
        in: path
        name: argPropCid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProposalRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table ProposalRecords by  argPropCid
      tags:
      - ProposalRecords
  /rank/miners/{top}:
    get:
      consumes:
      - application/json
      description: Get list of Miners
      parameters:
      - description: top
        in: path
        name: top
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dao.TopMiner'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Miners
      tags:
      - Ranks
  /rank/users/{top}:
    get:
      consumes:
      - application/json
      description: Get list of Users
      parameters:
      - description: top
        in: path
        name: top
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dao.TopUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Users
      tags:
      - Ranks
  /rank/users/collection/{top}:
    get:
      consumes:
      - application/json
      description: Get list of Users
      parameters:
      - description: top
        in: path
        name: top
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dao.TopCollectionUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Users
      tags:
      - Ranks
  /retrievalfailurerecords:
    get:
      consumes:
      - application/json
      description: GetAllRetrievalFailureRecords is a handler to get a slice of record(s)
        from retrieval_failure_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.RetrievalFailureRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of RetrievalFailureRecords
      tags:
      - RetrievalFailureRecords
  /retrievalfailurerecords/{argID}:
    get:
      consumes:
      - application/json
      description: GetRetrievalFailureRecords is a function to get a single record
        from the retrieval_failure_records table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RetrievalFailureRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table RetrievalFailureRecords by  argID
      tags:
      - RetrievalFailureRecords
  /retrievalsuccessrecords:
    get:
      consumes:
      - application/json
      description: GetAllRetrievalSuccessRecords is a handler to get a slice of record(s)
        from retrieval_success_records table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.RetrievalSuccessRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of RetrievalSuccessRecords
      tags:
      - RetrievalSuccessRecords
  /retrievalsuccessrecords/{argPropCid}:
    get:
      consumes:
      - application/json
      description: GetRetrievalSuccessRecords is a function to get a single record
        from the retrieval_success_records table in the estuary database
      parameters:
      - description: prop_cid
        in: path
        name: argPropCid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RetrievalSuccessRecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table RetrievalSuccessRecords by  argPropCid
      tags:
      - RetrievalSuccessRecords
  /shuttles:
    get:
      consumes:
      - application/json
      description: GetAllShuttles is a handler to get a slice of record(s) from shuttles
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Shuttle'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Shuttles
      tags:
      - Shuttles
  /shuttles/{argID}:
    get:
      consumes:
      - application/json
      description: GetShuttles is a function to get a single record from the shuttles
        table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Shuttle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Shuttles by  argID
      tags:
      - Shuttles
  /stats/deal-metrics:
    get:
      consumes:
      - application/json
      description: Returns the deal metrics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/statsapi.DealMetricsInfo'
            type: array
      summary: Returns the deal metrics
      tags:
      - Stats
  /stats/info:
    get:
      consumes:
      - application/json
      description: Returns the public stats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/statsapi.PublicStats'
      summary: Returns the public stats
      tags:
      - Stats
  /stats/retrieval-rates:
    get:
      consumes:
      - application/json
      description: Returns the retrieval stats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/statsapi.RetrievalStats'
      summary: Returns the retrieval stats
      tags:
      - Stats
  /stats/storage-rates:
    get:
      consumes:
      - application/json
      description: Returns the storage rate stats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/statsapi.StorageRateStats'
      summary: Returns the storage rate stats
      tags:
      - Stats
  /stats/total-content-deals-attempted:
    get:
      consumes:
      - application/json
      description: Returns the total number of content deals attempted
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Returns the total number of content deals attempted
      tags:
      - Stats
  /stats/total-files:
    get:
      consumes:
      - application/json
      description: Returns the total number of files stored
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Returns the total number of files stored
      tags:
      - Stats
  /stats/total-retrievals:
    get:
      consumes:
      - application/json
      description: Get total number of retrieval deals attempted
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Get total number of retrieval deals attempted
      tags:
      - Stats
  /stats/total-storage:
    get:
      consumes:
      - application/json
      description: Returns the total storage
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Returns the total storage
      tags:
      - Stats
  /storageminers:
    get:
      consumes:
      - application/json
      description: GetAllStorageMiners is a handler to get a slice of record(s) from
        storage_miners table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.StorageMiner'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of StorageMiners
      tags:
      - StorageMiners
  /storageminers/{argID}:
    get:
      consumes:
      - application/json
      description: GetStorageMiners is a function to get a single record from the
        storage_miners table in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StorageMiner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table StorageMiners by  argID
      tags:
      - StorageMiners
  /users:
    get:
      consumes:
      - application/json
      description: GetAllUsers is a handler to get a slice of record(s) from users
        table in the estuary database
      parameters:
      - description: page requested (defaults to 0)
        in: query
        name: page
        type: integer
      - description: number of records in a page  (defaults to 20)
        in: query
        name: pagesize
        type: integer
      - description: db sort order column
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get list of Users
      tags:
      - Users
  /users/{argID}:
    get:
      consumes:
      - application/json
      description: GetUsers is a function to get a single record from the users table
        in the estuary database
      parameters:
      - description: id
        in: path
        name: argID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: ErrNotFound, db record for id not found - returns NotFound
            HTTP 404 not found error
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get record from table Users by  argID
      tags:
      - Users
  /users/count:
    get:
      consumes:
      - application/json
      description: GetNumberOfUsersWithinRange is a handler to get the number of record(s)
        from users table in the estuary database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get number of Users within range
      tags:
      - Users
  /users/within-range:
    get:
      consumes:
      - application/json
      description: GetNumberOfUsers is a handler to get the number of record(s) from
        users table in the estuary database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PagedResults'
            - properties:
                data:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.HTTPError'
      summary: Get number of Users
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/application-research/estuary-metrics/core/generated/model"
)

func newRetrievalEvent(db *gorm.DB) retrievalEvent {
	_retrievalEvent := retrievalEvent{}

	_retrievalEvent.retrievalEventDo.UseDB(db)
	_retrievalEvent.retrievalEventDo.UseModel(&model.RetrievalEvent{})

	tableName := _retrievalEvent.retrievalEventDo.TableName()
	_retrievalEvent.ALL = field.NewField(tableName, "*")
	_retrievalEvent.RetrievalID = field.NewString(tableName, "retrieval_id")
	_retrievalEvent.InstanceID = field.NewString(tableName, "instance_id")
	_retrievalEvent.Cid = field.NewString(tableName, "cid")
	_retrievalEvent.StorageProviderID = field.NewString(tableName, "storage_provider_id")
	_retrievalEvent.Phase = field.NewString(tableName, "phase")
	_retrievalEvent.PhaseStartTime = field.NewTime(tableName, "phase_start_time")
	_retrievalEvent.EventName = field.NewString(tableName, "event_name")
	_retrievalEvent.EventTime = field.NewString(tableName, "event_time")
	_retrievalEvent.Success = field.NewBool(tableName, "success")
	_retrievalEvent.EventDetails = field.NewString(tableName, "event_details")

	_retrievalEvent.fillFieldMap()

	return _retrievalEvent
}

type retrievalEvent struct {
	retrievalEventDo

	ALL               field.Field
	RetrievalID       field.String
	InstanceID        field.String
	Cid               field.String
	StorageProviderID field.String
	Phase             field.String
	PhaseStartTime    field.Time
	EventName         field.String
	EventTime         field.String
	Success           field.Bool
	EventDetails      field.String

	fieldMap map[string]field.Expr
}

func (r retrievalEvent) Table(newTableName string) *retrievalEvent {
	r.retrievalEventDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r retrievalEvent) As(alias string) *retrievalEvent {
	r.retrievalEventDo.DO = *(r.retrievalEventDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *retrievalEvent) updateTableName(table string) *retrievalEvent {
	r.ALL = field.NewField(table, "*")
	r.RetrievalID = field.NewString(table, "retrieval_id")
	r.InstanceID = field.NewString(table, "instance_id")
	r.Cid = field.NewString(table, "cid")
	r.StorageProviderID = field.NewString(table, "storage_provider_id")
	r.Phase = field.NewString(table, "phase")
	r.PhaseStartTime = field.NewTime(table, "phase_start_time")
	r.EventName = field.NewString(table, "event_name")
	r.EventTime = field.NewString(table, "event_time")
	r.Success = field.NewBool(table, "success")
	r.EventDetails = field.NewString(table, "event_details")

	r.fillFieldMap()

	return r
}

func (r *retrievalEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *retrievalEvent) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 10)
	r.fieldMap["retrieval_id"] = r.RetrievalID
	r.fieldMap["instance_id"] = r.InstanceID
	r.fieldMap["cid"] = r.Cid
	r.fieldMap["storage_provider_id"] = r.StorageProviderID
	r.fieldMap["phase"] = r.Phase
	r.fieldMap["phase_start_time"] = r.PhaseStartTime
	r.fieldMap["event_name"] = r.EventName
	r.fieldMap["event_time"] = r.EventTime
	r.fieldMap["success"] = r.Success
	r.fieldMap["event_details"] = r.EventDetails
}

func (r retrievalEvent) clone(db *gorm.DB) retrievalEvent {
	r.retrievalEventDo.ReplaceDB(db)
	return r
}

type retrievalEventDo struct{ gen.DO }

type IRetrievalEventDo interface {
	Debug() IRetrievalEventDo
	WithContext(ctx context.Context) IRetrievalEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRetrievalEventDo
	Not(conds ...gen.Condition) IRetrievalEventDo
	Or(conds ...gen.Condition) IRetrievalEventDo
	Select(conds ...field.Expr) IRetrievalEventDo
	Where(conds ...gen.Condition) IRetrievalEventDo
	Order(conds ...field.Expr) IRetrievalEventDo
	Distinct(cols ...field.Expr) IRetrievalEventDo
	Omit(cols ...field.Expr) IRetrievalEventDo
	Join(table schema.Tabler, on ...field.Expr) IRetrievalEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRetrievalEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRetrievalEventDo
	Group(cols ...field.Expr) IRetrievalEventDo
	Having(conds ...gen.Condition) IRetrievalEventDo
	Limit(limit int) IRetrievalEventDo
	Offset(offset int) IRetrievalEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRetrievalEventDo
	Unscoped() IRetrievalEventDo
	Create(values ...*model.RetrievalEvent) error
	CreateInBatches(values []*model.RetrievalEvent, batchSize int) error
	Save(values ...*model.RetrievalEvent) error
	First() (*model.RetrievalEvent, error)
	Take() (*model.RetrievalEvent, error)
	Last() (*model.RetrievalEvent, error)
	Find() ([]*model.RetrievalEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RetrievalEvent, err error)
	FindInBatches(result *[]*model.RetrievalEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete() (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRetrievalEventDo
	Assign(attrs ...field.AssignExpr) IRetrievalEventDo
	Joins(fields ...field.RelationField) IRetrievalEventDo
	Preload(fields ...field.RelationField) IRetrievalEventDo
	FirstOrInit() (*model.RetrievalEvent, error)
	FirstOrCreate() (*model.RetrievalEvent, error)
	FindByPage(offset int, limit int) (result []*model.RetrievalEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRetrievalEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r retrievalEventDo) Debug() IRetrievalEventDo {
	return r.withDO(r.DO.Debug())
}

func (r retrievalEventDo) WithContext(ctx context.Context) IRetrievalEventDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r retrievalEventDo) ReadDB() IRetrievalEventDo {
	return r.Clauses(dbresolver.Read)
}

func (r retrievalEventDo) WriteDB() IRetrievalEventDo {
	return r.Clauses(dbresolver.Write)
}

func (r retrievalEventDo) Clauses(conds ...clause.Expression) IRetrievalEventDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r retrievalEventDo) Returning(value interface{}, columns ...string) IRetrievalEventDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r retrievalEventDo) Not(conds ...gen.Condition) IRetrievalEventDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r retrievalEventDo) Or(conds ...gen.Condition) IRetrievalEventDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r retrievalEventDo) Select(conds ...field.Expr) IRetrievalEventDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r retrievalEventDo) Where(conds ...gen.Condition) IRetrievalEventDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r retrievalEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRetrievalEventDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r retrievalEventDo) Order(conds ...field.Expr) IRetrievalEventDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r retrievalEventDo) Distinct(cols ...field.Expr) IRetrievalEventDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r retrievalEventDo) Omit(cols ...field.Expr) IRetrievalEventDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r retrievalEventDo) Join(table schema.Tabler, on ...field.Expr) IRetrievalEventDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r retrievalEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRetrievalEventDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r retrievalEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IRetrievalEventDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r retrievalEventDo) Group(cols ...field.Expr) IRetrievalEventDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r retrievalEventDo) Having(conds ...gen.Condition) IRetrievalEventDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r retrievalEventDo) Limit(limit int) IRetrievalEventDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r retrievalEventDo) Offset(offset int) IRetrievalEventDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r retrievalEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRetrievalEventDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r retrievalEventDo) Unscoped() IRetrievalEventDo {
	return r.withDO(r.DO.Unscoped())
}

func (r retrievalEventDo) Create(values ...*model.RetrievalEvent) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r retrievalEventDo) CreateInBatches(values []*model.RetrievalEvent, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r retrievalEventDo) Save(values ...*model.RetrievalEvent) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r retrievalEventDo) First() (*model.RetrievalEvent, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalEvent), nil
	}
}

func (r retrievalEventDo) Take() (*model.RetrievalEvent, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalEvent), nil
	}
}

func (r retrievalEventDo) Last() (*model.RetrievalEvent, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalEvent), nil
	}
}

func (r retrievalEventDo) Find() ([]*model.RetrievalEvent, error) {
	result, err := r.DO.Find()
	return result.([]*model.RetrievalEvent), err
}

func (r retrievalEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RetrievalEvent, err error) {
	buf := make([]*model.RetrievalEvent, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r retrievalEventDo) FindInBatches(result *[]*model.RetrievalEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r retrievalEventDo) Attrs(attrs ...field.AssignExpr) IRetrievalEventDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r retrievalEventDo) Assign(attrs ...field.AssignExpr) IRetrievalEventDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r retrievalEventDo) Joins(fields ...field.RelationField) IRetrievalEventDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r retrievalEventDo) Preload(fields ...field.RelationField) IRetrievalEventDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r retrievalEventDo) FirstOrInit() (*model.RetrievalEvent, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalEvent), nil
	}
}

func (r retrievalEventDo) FirstOrCreate() (*model.RetrievalEvent, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RetrievalEvent), nil
	}
}

func (r retrievalEventDo) FindByPage(offset int, limit int) (result []*model.RetrievalEvent, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r retrievalEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r retrievalEventDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r *retrievalEventDo) withDO(do gen.Dao) *retrievalEventDo {
	r.DO = *do.(*gen.DO)
	return r
}

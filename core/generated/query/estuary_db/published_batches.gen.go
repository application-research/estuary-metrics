// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package estuary_db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/application-research/estuary-metrics/core/generated/model"
)

func newPublishedBatch(db *gorm.DB) publishedBatch {
	_publishedBatch := publishedBatch{}

	_publishedBatch.publishedBatchDo.UseDB(db)
	_publishedBatch.publishedBatchDo.UseModel(&model.PublishedBatch{})

	tableName := _publishedBatch.publishedBatchDo.TableName()
	_publishedBatch.ALL = field.NewField(tableName, "*")
	_publishedBatch.ID = field.NewInt64(tableName, "id")
	_publishedBatch.CreatedAt = field.NewTime(tableName, "created_at")
	_publishedBatch.UpdatedAt = field.NewTime(tableName, "updated_at")
	_publishedBatch.DeletedAt = field.NewField(tableName, "deleted_at")
	_publishedBatch.FirstContentID = field.NewInt64(tableName, "first_content_id")
	_publishedBatch.Count_ = field.NewInt64(tableName, "count")
	_publishedBatch.AutoretrieveHandle = field.NewString(tableName, "autoretrieve_handle")

	_publishedBatch.fillFieldMap()

	return _publishedBatch
}

type publishedBatch struct {
	publishedBatchDo

	ALL                field.Field
	ID                 field.Int64
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	FirstContentID     field.Int64
	Count_             field.Int64
	AutoretrieveHandle field.String

	fieldMap map[string]field.Expr
}

func (p publishedBatch) Table(newTableName string) *publishedBatch {
	p.publishedBatchDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishedBatch) As(alias string) *publishedBatch {
	p.publishedBatchDo.DO = *(p.publishedBatchDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishedBatch) updateTableName(table string) *publishedBatch {
	p.ALL = field.NewField(table, "*")
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.FirstContentID = field.NewInt64(table, "first_content_id")
	p.Count_ = field.NewInt64(table, "count")
	p.AutoretrieveHandle = field.NewString(table, "autoretrieve_handle")

	p.fillFieldMap()

	return p
}

func (p *publishedBatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishedBatch) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["first_content_id"] = p.FirstContentID
	p.fieldMap["count"] = p.Count_
	p.fieldMap["autoretrieve_handle"] = p.AutoretrieveHandle
}

func (p publishedBatch) clone(db *gorm.DB) publishedBatch {
	p.publishedBatchDo.ReplaceDB(db)
	return p
}

type publishedBatchDo struct{ gen.DO }

type IPublishedBatchDo interface {
	Debug() IPublishedBatchDo
	WithContext(ctx context.Context) IPublishedBatchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishedBatchDo
	Not(conds ...gen.Condition) IPublishedBatchDo
	Or(conds ...gen.Condition) IPublishedBatchDo
	Select(conds ...field.Expr) IPublishedBatchDo
	Where(conds ...gen.Condition) IPublishedBatchDo
	Order(conds ...field.Expr) IPublishedBatchDo
	Distinct(cols ...field.Expr) IPublishedBatchDo
	Omit(cols ...field.Expr) IPublishedBatchDo
	Join(table schema.Tabler, on ...field.Expr) IPublishedBatchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishedBatchDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishedBatchDo
	Group(cols ...field.Expr) IPublishedBatchDo
	Having(conds ...gen.Condition) IPublishedBatchDo
	Limit(limit int) IPublishedBatchDo
	Offset(offset int) IPublishedBatchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishedBatchDo
	Unscoped() IPublishedBatchDo
	Create(values ...*model.PublishedBatch) error
	CreateInBatches(values []*model.PublishedBatch, batchSize int) error
	Save(values ...*model.PublishedBatch) error
	First() (*model.PublishedBatch, error)
	Take() (*model.PublishedBatch, error)
	Last() (*model.PublishedBatch, error)
	Find() ([]*model.PublishedBatch, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishedBatch, err error)
	FindInBatches(result *[]*model.PublishedBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete() (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishedBatchDo
	Assign(attrs ...field.AssignExpr) IPublishedBatchDo
	Joins(fields ...field.RelationField) IPublishedBatchDo
	Preload(fields ...field.RelationField) IPublishedBatchDo
	FirstOrInit() (*model.PublishedBatch, error)
	FirstOrCreate() (*model.PublishedBatch, error)
	FindByPage(offset int, limit int) (result []*model.PublishedBatch, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishedBatchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishedBatchDo) Debug() IPublishedBatchDo {
	return p.withDO(p.DO.Debug())
}

func (p publishedBatchDo) WithContext(ctx context.Context) IPublishedBatchDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishedBatchDo) ReadDB() IPublishedBatchDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishedBatchDo) WriteDB() IPublishedBatchDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishedBatchDo) Clauses(conds ...clause.Expression) IPublishedBatchDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishedBatchDo) Returning(value interface{}, columns ...string) IPublishedBatchDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishedBatchDo) Not(conds ...gen.Condition) IPublishedBatchDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishedBatchDo) Or(conds ...gen.Condition) IPublishedBatchDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishedBatchDo) Select(conds ...field.Expr) IPublishedBatchDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishedBatchDo) Where(conds ...gen.Condition) IPublishedBatchDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishedBatchDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishedBatchDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishedBatchDo) Order(conds ...field.Expr) IPublishedBatchDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishedBatchDo) Distinct(cols ...field.Expr) IPublishedBatchDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishedBatchDo) Omit(cols ...field.Expr) IPublishedBatchDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishedBatchDo) Join(table schema.Tabler, on ...field.Expr) IPublishedBatchDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishedBatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishedBatchDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishedBatchDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishedBatchDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishedBatchDo) Group(cols ...field.Expr) IPublishedBatchDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishedBatchDo) Having(conds ...gen.Condition) IPublishedBatchDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishedBatchDo) Limit(limit int) IPublishedBatchDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishedBatchDo) Offset(offset int) IPublishedBatchDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishedBatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishedBatchDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishedBatchDo) Unscoped() IPublishedBatchDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishedBatchDo) Create(values ...*model.PublishedBatch) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishedBatchDo) CreateInBatches(values []*model.PublishedBatch, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishedBatchDo) Save(values ...*model.PublishedBatch) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishedBatchDo) First() (*model.PublishedBatch, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishedBatch), nil
	}
}

func (p publishedBatchDo) Take() (*model.PublishedBatch, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishedBatch), nil
	}
}

func (p publishedBatchDo) Last() (*model.PublishedBatch, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishedBatch), nil
	}
}

func (p publishedBatchDo) Find() ([]*model.PublishedBatch, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishedBatch), err
}

func (p publishedBatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishedBatch, err error) {
	buf := make([]*model.PublishedBatch, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishedBatchDo) FindInBatches(result *[]*model.PublishedBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishedBatchDo) Attrs(attrs ...field.AssignExpr) IPublishedBatchDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishedBatchDo) Assign(attrs ...field.AssignExpr) IPublishedBatchDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishedBatchDo) Joins(fields ...field.RelationField) IPublishedBatchDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishedBatchDo) Preload(fields ...field.RelationField) IPublishedBatchDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishedBatchDo) FirstOrInit() (*model.PublishedBatch, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishedBatch), nil
	}
}

func (p publishedBatchDo) FirstOrCreate() (*model.PublishedBatch, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishedBatch), nil
	}
}

func (p publishedBatchDo) FindByPage(offset int, limit int) (result []*model.PublishedBatch, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishedBatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishedBatchDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p *publishedBatchDo) withDO(do gen.Dao) *publishedBatchDo {
	p.DO = *do.(*gen.DO)
	return p
}
